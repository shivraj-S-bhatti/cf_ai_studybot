/**
 * Study Buddy Agent - Cloudflare Workers Entry Point
 * 
 * This is the main entry point for the Study Buddy Agent application.
 * It demonstrates the integration of multiple Cloudflare services:
 * 
 * - Cloudflare Workers: Main runtime environment
 * - Durable Objects: Stateful compute for persistent chat sessions
 * - Workers AI: AI-powered natural language processing
 * - D1 Database: SQLite database for persistent storage
 * - WebSocket: Real-time communication support
 * 
 * Architecture:
 * - Main Worker handles HTTP requests and WebSocket connections
 * - Durable Object (StudyBotAgent) manages user state and AI interactions
 * - Test endpoints for development and debugging
 */

import { StudyBotAgent } from './agent';
import { testTypes, testAI, testDatabase } from './test-types';

// Env interface is now generated by wrangler types

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    const url = new URL(request.url);
    
    // Handle WebSocket connections for real-time chat
    if (request.headers.get('Upgrade') === 'websocket') {
      const id = env.STUDYBOT_AGENT.idFromName('main');
      const obj = env.STUDYBOT_AGENT.get(id);
      return obj.fetch(request);
    }
    
    // Handle API endpoints
    if (url.pathname === '/api/chat' && request.method === 'POST') {
      const id = env.STUDYBOT_AGENT.idFromName('main');
      const obj = env.STUDYBOT_AGENT.get(id);
      return obj.fetch(request);
    }
    
    // Quiz management APIs
    if (url.pathname === '/api/quiz/list' && request.method === 'GET') {
      const id = env.STUDYBOT_AGENT.idFromName('main');
      const obj = env.STUDYBOT_AGENT.get(id);
      return obj.fetch(request);
    }
    
    if (url.pathname.startsWith('/api/quiz/') && request.method === 'GET') {
      const id = env.STUDYBOT_AGENT.idFromName('main');
      const obj = env.STUDYBOT_AGENT.get(id);
      return obj.fetch(request);
    }
    
    if (url.pathname.match(/^\/api\/quiz\/[^/]+\/submit$/) && request.method === 'POST') {
      const id = env.STUDYBOT_AGENT.idFromName('main');
      const obj = env.STUDYBOT_AGENT.get(id);
      return obj.fetch(request);
    }
    
    // Test endpoints
    if (url.pathname === '/api/test/types' && request.method === 'GET') {
      const results = testTypes();
      return new Response(JSON.stringify(results, null, 2), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    if (url.pathname === '/api/test/ai' && request.method === 'GET') {
      const results = await testAI(env);
      return new Response(JSON.stringify(results, null, 2), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    if (url.pathname === '/api/test/database' && request.method === 'GET') {
      const results = await testDatabase(env);
      return new Response(JSON.stringify(results, null, 2), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    if (url.pathname === '/api/test/all' && request.method === 'GET') {
      const typeResults = testTypes();
      const aiResults = await testAI(env);
      const dbResults = await testDatabase(env);
      
      const allResults = {
        types: typeResults,
        ai: aiResults,
        database: dbResults,
        timestamp: new Date().toISOString()
      };
      
      return new Response(JSON.stringify(allResults, null, 2), {
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    // Serve simple frontend
    return new Response(`
<!DOCTYPE html>
<html>
<head>
    <title>Study Buddy Agent</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .chat { border: 1px solid #ccc; height: 400px; overflow-y: auto; padding: 10px; margin: 10px 0; }
        .input { display: flex; gap: 10px; }
        input { flex: 1; padding: 10px; }
        button { padding: 10px 20px; }
    </style>
</head>
<body>
    <h1>ðŸ¤– Study Buddy Agent</h1>
    <div id="chat" class="chat"></div>
    <div class="input">
        <input type="text" id="message" placeholder="Type your message...">
        <button onclick="sendMessage()">Send</button>
    </div>
    <script>
        function sendMessage() {
            const input = document.getElementById('message');
            const chat = document.getElementById('chat');
            const message = input.value.trim();
            if (!message) return;
            
            chat.innerHTML += '<div><strong>You:</strong> ' + message + '</div>';
            input.value = '';
            
            fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: message, userId: 'default' })
            })
            .then(r => r.json())
            .then(data => {
                chat.innerHTML += '<div><strong>Study Buddy:</strong> ' + data.response + '</div>';
                chat.scrollTop = chat.scrollHeight;
            })
            .catch(e => {
                chat.innerHTML += '<div><strong>Error:</strong> ' + e.message + '</div>';
            });
        }
        
        document.getElementById('message').addEventListener('keypress', e => {
            if (e.key === 'Enter') sendMessage();
        });
    </script>
</body>
</html>`, {
      headers: { 'Content-Type': 'text/html' }
    });
  }
};

export { StudyBotAgent };